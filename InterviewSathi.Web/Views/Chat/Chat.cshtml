@using InterviewSathi.Web.Models.Entities
@{
    var messages = ViewBag.Messages as List<PrivateMessage>;
}


<div class="py-2 px-4 border-bottom d-lg-block">
    <div class="d-flex align-items-center py-1">
        <div class="position-relative">
            <img id="profile-pic" src="~/Images/Profiles/@Model.ProfileURL" class="rounded-circle mr-1" alt="Sharon Lessman" width="40" height="40">
        </div>
        <div class="flex-grow-1 pl-3">
            <a asp-action="UserProfile" asp-controller="Profile" asp-route-id="@Model.Id" class="text-black text-decoration-none">
                <strong>@Model.Name</strong>
            </a>
        </div>
        <div>
            <button id="startVideoButton" onclick="createOffer()" class="btn btn-info btn-lg mr-1 px-3 d-md-inline-block"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-video feather-lg"><polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect></svg></button>
            <button class="btn btn-light border btn-lg px-3"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-more-horizontal feather-lg"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg></button>
        </div>
    </div>
</div>
<div class="chat-messages">
    <ul id="messagesList" class="list-unstyled p-4">
        @foreach (var message in messages)
        {
            if (message.SenderId == Model.Id)
            {
                <li class="received">Received: @message.MessageContent</li>
            }
            else
            {
                <li class="sent">
                    Sent: @message.MessageContent
                    <button class="delete-button btn btn-sm" data-message-id="@message.Id">
                        &times;
                    </button>
                </li>
            }
        }
    </ul>
</div>
<div class="flex-grow-0 py-3 px-4 border-top">
    <div class="input-group">
        <input type="text" id="ddlSelUser" value="@Model.Id" hidden>
        <input type="text" id="ddlSelUserName" value="@Model.Name" hidden>
        <input type="text" id="txtPrivateMessage" class="form-control" placeholder="Type your message">
        <button id="sendButton" class="btn btn-primary" onclick="sendPrivateMessage()">Send</button>
    </div>
</div>


<video id="selfView" autoplay muted height="200px" width="300px" style="display: none;"></video>
<video id="remoteView" autoplay height="200px" width="300px" style="display: none;" ></video>
<button id="joinVideoButton" class="btn btn-info btn-lg mr-1 px-3" style="display: none;" onclick="handleOffer()">Join Video Call</button>
<button id="hangUpButton" class="btn btn-danger" style="display: none;" onclick="hangUp()">Hang Up</button>


 
<button class="btn btn-dark" id="videoControl" onclick="toggleVideo()" style="display: none;">Toggle Video</button>
<button class="btn btn-dark" id="audioControl" onclick="toggleAudio()" style="display: none;">Toggle Audio</button>
<button class="btn btn-dark" id="screenControl" onclick="toggleScreenSharing()">Toggle Media</button>
<button class="btn btn-dark" id="toggleFullscreenButton" onclick="toggleFullscreen()">Toggle Fullscreen</button>


<script>
    $("#messagesList").on("click", ".delete-button", function () {
        var messageId = $(this).data("message-id");

        $.ajax({
            url: "/Chat/delete-message/" + messageId,
            type: "DELETE",
            success: function (data) {
                console.log('Message deleted successfully:', data);

                $(this).closest('li').hide();
            }.bind(this),
            error: function (error) {
                console.error('Error deleting message:', error);
            }
        });
    });

    // Function to toggle fullscreen for the video element
    function toggleFullscreen() {
        const remoteVideo = document.getElementById('remoteView');

        if (!document.fullscreenElement) {
            // If not in fullscreen, request fullscreen
            if (remoteVideo.requestFullscreen) {
                remoteVideo.requestFullscreen();
            } else if (remoteVideo.mozRequestFullScreen) { // Firefox
                remoteVideo.mozRequestFullScreen();
            } else if (remoteVideo.webkitRequestFullscreen) { // Chrome, Safari, and Edge
                remoteVideo.webkitRequestFullscreen();
            } else if (remoteVideo.msRequestFullscreen) { // IE/Edge
                remoteVideo.msRequestFullscreen();
            }
        } else {
            // If already in fullscreen, exit fullscreen
            if (document.exitFullscreen) {
                document.exitFullscreen();
            } else if (document.mozCancelFullScreen) { // Firefox
                document.mozCancelFullScreen();
            } else if (document.webkitExitFullscreen) { // Chrome, Safari, and Edge
                document.webkitExitFullscreen();
            } else if (document.msExitFullscreen) { // IE/Edge
                document.msExitFullscreen();
            }
        }
    }

    // Event listener to handle changes in fullscreen mode
    document.addEventListener('fullscreenchange', handleFullscreenChange);
    document.addEventListener('mozfullscreenchange', handleFullscreenChange);
    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
    document.addEventListener('msfullscreenchange', handleFullscreenChange);

    // Function to handle changes in fullscreen mode
    function handleFullscreenChange() {
        const remoteVideo = document.getElementById('remoteView');
        const isFullscreen = document.fullscreenElement || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement;

        if (isFullscreen) {
            // Adjust styles or perform actions when entering fullscreen
            remoteVideo.style.width = '100%';
            remoteVideo.style.height = '100%';
        } else {
            // Adjust styles or perform actions when exiting fullscreen
            remoteVideo.style.width = '300px';
            remoteVideo.style.height = '200px';
        }
    }

</script>



