@model IEnumerable<InterviewSathi.Web.Models.Entities.ApplicationUser>
@{
    string? loggedUser = User.FindFirstValue(ClaimTypes.NameIdentifier)?.ToString();
    ViewData["Title"] = "Chat";
    string newChat = ViewBag.ChatWith;
}

<style>
    .chat-online {
        color: #34ce57
    }

    .chat-offline {
        color: #e4606d
    }

    .chat-messages {
        display: flex;
        flex-direction: column;
        max-height: 400px;
        overflow-y: scroll;
    }

    .received,
    .sent {
        max-width: 70%;
        border-radius: 8px;
        display: flex;
        margin: 5px;
        padding: 10px;
        word-wrap: break-word;
    }

    .received {
        margin-right: auto;
        background-color: #f1f1f1;
        color: black;
    }

    .sent {
        flex-direction: row-reverse;
        margin-left: auto;
        background-color: #4CAF50;
        color: white;
    }

    .flex-grow-0 {
        flex-grow: 0 !important;
    }

    .border-top {
        border-top: 1px solid #dee2e6 !important;
    }
    /* Apply default styles to all buttons */
    .btn-video,
    .btn-audio,
    .btn-screen,
    .btn-fullscreen,
    .btn-join,
    .btn-hang {
        display: none; /* Hide buttons by default */
        margin-top: 10px; /* Adjust as needed */
    }

        /* Override display for buttons with display:block status */
        .btn-video[style*="block"],
        .btn-audio[style*="block"],
        .btn-screen[style*="block"],
        .btn-fullscreen[style*="block"],
        .btn-join[style*="block"],
        .btn-hang[style*="block"] {
            display: block !important;
        }

    /* Add specific styles to the buttons */
    .btn-join,
    .btn-hang {
        margin-right: 5px; /* Adjust as needed */
    }

    .btn-join {
        background-color: #17a2b8;
        border-color: #17a2b8;
    }

        .btn-join:hover,
        .btn-hang:hover,
        .btn-video:hover,
        .btn-audio:hover,
        .btn-screen:hover,
        .btn-fullscreen:hover {
            opacity: 0.8;
        }
</style>

<div class="container">
    <div class="row">
        <input type="text" id="userIdInput" style="display: none;">
        <button id="goToUserButton" style="display: none" class="btn btn-primary"><span id="callNotification" class="alert"></span>Pick and Go to userId</button>
    </div>
    <audio id="notificationSound" preload="auto" volume="0.5">
        <source src="~/audio/notification.mp3" type="audio/mpeg" />
    </audio>
    <div class="row flex-nowrap">
        <div id="sidebar" class="col-auto col-md-3 col-xl-2 px-sm-2 px-0 bg-light adminPanel">
            <div class="d-flex flex-column align-items-center align-items-sm-start px-3 pt-2 text-dark">
                <a href="#" class="d-flex align-items-center pb-3 mb-md-0 me-md-auto text-white text-decoration-none">
                    <span class="fs-5 d-none d-sm-inline text-black">Chat</span>
                </a>
                <ul class="nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start" id="menu">
                    @foreach (var item in Model)
                    {
                        <li class="nav-item mt-3">

                            <a href="#" class="text-decoration-none text-dark align-middle px-0 user-link" data-user-id="@item.Id">
                                <div class="d-flex align-items-start">
                                    <div class="user-info" data-toggle="tooltip" title="@Html.DisplayFor(modelItem => item.Name)">
                                        <img src="~/Images/Profiles/@item.ProfileURL" class="rounded-circle user-image" alt="Profile Picture" width="40px" height="40px" data-toggle="tooltip" title="@Html.DisplayFor(modelItem => item.Name)">
                                    </div>
                                    <div class="flex-grow-1 ml-3">
                                        <span class="ms-1 d-none d-sm-inline">@Html.DisplayFor(modelItem => item.Name)</span>

                                    </div>
                                </div>
                            </a>

                        </li>
                    }

                </ul>

            </div>
        </div>
        <div class="col py-3">
            <div class="">
                <div id="chat-container" method="get" data-ajax="true" data-ajax-method="get" data-ajax-complete="postEvent">
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    var loggedUser = '@loggedUser';
    var userId = '@newChat';

    // Loading the chat after determining the userId
    loadChat(userId);

    $(document).ready(function () {
        $(".user-link").click(function (e) {
            e.preventDefault();

            userId = $(this).data("user-id");
            loadChat(userId);
        });
    });
    $("#goToUserButton").click(function () {
        var userId = $("#userIdInput").val();
        if (userId) {
            loadChat(userId);
        } else {
            alert("Please enter a valid User ID.");
        }
        handleOffer();
        document.getElementById('userIdInput').value = "";
        document.getElementById('callNotification').textContent = "";
        document.getElementById('goToUserButton').style.display = 'none';
        document.getElementById('video-col').style.display = 'block';
    });

    function loadChat(userId) {
        $.ajax({
            url: "/Chat/Chat/" + userId,
            data: { userId: userId },
            type: "GET",
            success: function (result) {
                $("#chat-container").html(result);

                const stars = document.querySelectorAll('.rating i');
                const starInput = document.getElementById('starInput');

                stars.forEach(star => {
                    star.style.color = 'gray';
                });

                stars.forEach(star => {
                    star.addEventListener('click', function () {
                        const rating = parseInt(star.getAttribute('data-rating'));
                        starInput.value = rating;

                        stars.forEach(s => {
                            if (parseInt(s.getAttribute('data-rating')) <= rating) {
                                s.style.color = 'gold';
                            } else {
                                s.style.color = 'gray';
                            }
                        });
                    });
                });
                starInput.value = '';
            },
            error: function (error) {
                console.error("Error loading chat:", error);
            }
        });
    }
</script>


<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/chatvideo.js"></script>



